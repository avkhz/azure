trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
  name: 'default'

  
variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  app_version: '1.0.$(Build.BuildId)'
  app_name: 'avihu_app'
  ORG_NAME: 'avihulink'
  branchName:  $(Build.SourceBranchName) 
  nupkg_path: $(System.DefaultWorkingDirectory)/$(app_name)/bin/Release/$(app_name).$(app_version).nupkg
  dll_path:   $(System.DefaultWorkingDirectory)/$(app_name)/bin/Debug/net8.0/$(app_name).dll

jobs:
- job: myJob
  workspace:
    clean: outputs | resources | all # what to clean up before the job runs
    
  steps:

  - script: dotnet new console -o $(app_name)
    displayName: 'Create app'
  
  - script: cd ./$(app_name) && dotnet restore

  - script: echo "branch name $(branchName)"
    displayName: 'Print branch name'

  - script: echo "app name $(app_name)"
    displayName: 'Print app name'
  
  - script: echo "app version $(app_version)"
    displayName: 'Print app version'
  
 # - task: SonarQubePrepare@5
 #   inputs:
 #     SonarQube: 'my_sonarqube'
 #     scannerMode: 'MSBuild'
 #     projectKey: 'hello_world_hello_world_e9fb010c-4902-49e6-b6bd-6cdfb63cc99b'
    
  - script: cd ./$(app_name) && dotnet build 
    displayName: 'Build Artifact'
     
  - publish: $(dll_path)
    artifact: hello
    displayName: 'Publish .dll to Pipeline'
                                          
#  - task: SonarQubeAnalyze@5
#    inputs:
#      jdkversion: 'JAVA_HOME_17_X64'

#  - task: SonarQubePublish@5
#    inputs:
#      pollingTimeoutSec: '300'
      
  - task: artifactstagger@1
    inputs:
      EndpointType: 'integrated'
      StageNameTag: false
      CustomTags: $(branchName)_$(app_version)
    displayName: 'Tag the Buildid'

  - script: cd ./$(app_name) && dotnet pack -p Version=$(app_version) 
    displayName: 'Pack the NuGet_File'
  
  - script: cd ./$(app_name) && dotnet nuget push --source $(ORG_NAME) --api-key az $(nupkg_path)
    displayName: 'Publish NuGet_File Azure Artifacts'
